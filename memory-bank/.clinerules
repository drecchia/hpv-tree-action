# Tree Action Project Rules and Patterns

## Code Organization

### File Structure Patterns
1. Source files in src/
   - js/ for JavaScript components
   - css/ for styling
2. Build files in gulp/
   - Separate js.js and css.js for build tasks
3. Examples in examples/
4. Built files in dist/

### Naming Conventions
1. Component Files:
   - Main class matches filename
   - Suffix with purpose (-ui, -node)
   - Use kebab-case for files

2. JavaScript:
   - PascalCase for classes
   - camelCase for methods/properties
   - UPPER_SNAKE_CASE for constants

3. CSS:
   - BEM methodology
   - tree-action prefix
   - Descriptive modifiers

## Implementation Patterns

### Event System
1. Event Names:
   - nodeCollapse/nodeExpand for node events
   - treeUpdate/dataLoad for tree events
   - searchStart/searchComplete for search

2. Event Handling:
   - Always emit after state changes
   - Include relevant data in event payload
   - Handle errors in async operations

### Tree Operations
1. Node Management:
   - Parent reference in each node
   - Children array for folders
   - Level tracking for hierarchy
   - Lazy loading support

2. State Updates:
   - Immutable state changes
   - Event emission after updates
   - Batch operations when possible
   - Clear error states

### Error Handling
1. Construction:
   - Validate required options
   - Check for missing handlers
   - Verify operation types

2. Runtime:
   - Handle async failures
   - Clear error states
   - User feedback
   - State consistency

## Development Workflow

### Build Process
1. JavaScript:
   ```bash
   gulp js     # Process JS files
   ```
   - Concatenation
   - Minification
   - Source maps

2. CSS:
   ```bash
   gulp css    # Process CSS files
   ```
   - Autoprefixer
   - Minification
   - Source maps

### Testing Approach
1. Unit Tests:
   - Event system coverage (target: 90%)
   - Tree operations validation
   - State management verification
   - Node relationship testing
   - Performance benchmarking
   - Error handling scenarios
   - Component isolation tests

2. Integration:
   - End-to-end UI workflows
   - Cross-browser compatibility
   - Data flow validation
   - Error recovery testing
   - Accessibility compliance
   - Performance regression
   - State consistency checks

3. Test Organization:
   - Feature-based test suites
   - Shared test utilities
   - Mock data generators
   - Performance test harness
   - Browser testing matrix
   - CI/CD integration

## Documentation Standards

### Code Comments
1. Classes:
   ```javascript
   /**
    * Class description
    */
   ```

2. Methods:
   ```javascript
   /**
    * Method description
    * @param {Type} name - Description
    * @returns {Type} Description
    */
   ```

### Example Format
1. Basic Usage:
   ```javascript
   const tree = new TreeAction({
     actionClickHandler: (node, action) => {
       // Handler implementation
     }
   });
   ```

2. Configuration:
   ```javascript
   const options = {
     operations: [
       { code: 'C', tooltip: 'Create' }
     ],
     childrenLoader: async (node) => {
       // Loader implementation
     }
   };
   ```

## Performance Guidelines

### Tree Operations
1. Node Updates:
   - Use batch operations for multiple changes
   - Minimize DOM reflows with fragments
   - Implement virtual scrolling for large datasets
   - Cache repeated traversal operations
   - Use efficient CSS selectors
   - Implement operation debouncing

2. Search:
   - Debounce user input (150ms default)
   - Optimize tree traversal with early exit
   - Cancel pending search operations
   - Cache search results where appropriate
   - Implement incremental search for large trees
   - Use worker threads for complex searches

### Event Handling
1. Event Flow:
   - Minimize event emission frequency
   - Implement event delegation
   - Batch related updates
   - Use event pooling for frequent events
   - Implement custom event bubbling
   - Cache event handler references

2. DOM Updates:
   - Use DocumentFragment for batch updates
   - Minimize style recalculation triggers
   - Implement efficient selector strategies
   - Cache DOM query results
   - Use CSS containment where appropriate
   - Optimize reflow/repaint cycles

## UI/UX Standards

### Visual Hierarchy
1. Node Display:
   - Clear parent-child
   - Obvious folders
   - Loading states
   - Operation buttons

2. Interactions:
   - Responsive clicks
   - Smooth transitions
   - Clear feedback
   - Error states

### Accessibility
1. Keyboard Navigation:
   - Arrow keys for tree traversal
   - Enter/Space for node selection
   - Custom operation shortcuts
   - Tab order management
   - Focus trap in modals
   - Visual focus indicators

2. Screen Reader Support:
   - ARIA landmark roles
   - Descriptive labels
   - Live region updates
   - State announcements
   - Node hierarchy context
   - Operation descriptions

3. Visual Accessibility:
   - High contrast support
   - Configurable color schemes
   - Zoom compatibility
   - Sufficient text size
   - Clear focus states
   - Loading indicators

4. Interaction Support:
   - Touch target sizes
   - Error announcements
   - Operation feedback
   - Progress indicators
   - Alternative text
   - Gesture support

## Version Control

### Commit Messages
1. Format:
   ```
   type(scope): description
   
   - Details point 1
   - Details point 2
   ```

2. Types:
   - feat: New features
   - fix: Bug fixes
   - docs: Documentation
   - perf: Performance
   - refactor: Code changes

### Branch Strategy
1. Main Branches:
   - main: Production code
   - develop: Development code

2. Feature Branches:
   - feature/name
   - fix/name
   - docs/name
